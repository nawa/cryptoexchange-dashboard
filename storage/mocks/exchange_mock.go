// Code generated by MockGen. DO NOT EDIT.
// Source: storage/exchange.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nawa/cryptoexchange-dashboard/domain"
)

// MockExchange is a mock of Exchange interface
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// GetBalance mocks base method
func (m *MockExchange) GetBalance() (*domain.Balance, error) {
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(*domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockExchangeMockRecorder) GetBalance() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockExchange)(nil).GetBalance))
}

// GetMarketInfo mocks base method
func (m *MockExchange) GetMarketInfo(market string) (*domain.MarketInfo, error) {
	ret := m.ctrl.Call(m, "GetMarketInfo", market)
	ret0, _ := ret[0].(*domain.MarketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketInfo indicates an expected call of GetMarketInfo
func (mr *MockExchangeMockRecorder) GetMarketInfo(market interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketInfo", reflect.TypeOf((*MockExchange)(nil).GetMarketInfo), market)
}

// GetOrders mocks base method
func (m *MockExchange) GetOrders() ([]domain.Order, error) {
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders
func (mr *MockExchangeMockRecorder) GetOrders() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockExchange)(nil).GetOrders))
}

// Ping mocks base method
func (m *MockExchange) Ping() error {
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockExchangeMockRecorder) Ping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockExchange)(nil).Ping))
}
