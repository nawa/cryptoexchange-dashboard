// Code generated by MockGen. DO NOT EDIT.
// Source: storage/balance.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nawa/cryptoexchange-dashboard/domain"
)

// MockBalanceStorage is a mock of BalanceStorage interface
type MockBalanceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStorageMockRecorder
}

// MockBalanceStorageMockRecorder is the mock recorder for MockBalanceStorage
type MockBalanceStorageMockRecorder struct {
	mock *MockBalanceStorage
}

// NewMockBalanceStorage creates a new mock instance
func NewMockBalanceStorage(ctrl *gomock.Controller) *MockBalanceStorage {
	mock := &MockBalanceStorage{ctrl: ctrl}
	mock.recorder = &MockBalanceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBalanceStorage) EXPECT() *MockBalanceStorageMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockBalanceStorage) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockBalanceStorageMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockBalanceStorage)(nil).Init))
}

// Save mocks base method
func (m *MockBalanceStorage) Save(arg0 *domain.Balance) error {
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBalanceStorageMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBalanceStorage)(nil).Save), arg0)
}

// FetchHourly mocks base method
func (m *MockBalanceStorage) FetchHourly(currency string, hours int) ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "FetchHourly", currency, hours)
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHourly indicates an expected call of FetchHourly
func (mr *MockBalanceStorageMockRecorder) FetchHourly(currency, hours interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHourly", reflect.TypeOf((*MockBalanceStorage)(nil).FetchHourly), currency, hours)
}

// FetchWeekly mocks base method
func (m *MockBalanceStorage) FetchWeekly(currency string) ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "FetchWeekly", currency)
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWeekly indicates an expected call of FetchWeekly
func (mr *MockBalanceStorageMockRecorder) FetchWeekly(currency interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWeekly", reflect.TypeOf((*MockBalanceStorage)(nil).FetchWeekly), currency)
}

// FetchMonthly mocks base method
func (m *MockBalanceStorage) FetchMonthly(currency string) ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "FetchMonthly", currency)
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMonthly indicates an expected call of FetchMonthly
func (mr *MockBalanceStorageMockRecorder) FetchMonthly(currency interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMonthly", reflect.TypeOf((*MockBalanceStorage)(nil).FetchMonthly), currency)
}

// FetchAll mocks base method
func (m *MockBalanceStorage) FetchAll(currency string) ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "FetchAll", currency)
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll
func (mr *MockBalanceStorageMockRecorder) FetchAll(currency interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockBalanceStorage)(nil).FetchAll), currency)
}

// GetActiveCurrencies mocks base method
func (m *MockBalanceStorage) GetActiveCurrencies() ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "GetActiveCurrencies")
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCurrencies indicates an expected call of GetActiveCurrencies
func (mr *MockBalanceStorageMockRecorder) GetActiveCurrencies() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCurrencies", reflect.TypeOf((*MockBalanceStorage)(nil).GetActiveCurrencies))
}
