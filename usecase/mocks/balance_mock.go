// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/balance.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nawa/cryptoexchange-dashboard/domain"
)

// MockBalanceUsecases is a mock of BalanceUsecases interface
type MockBalanceUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceUsecasesMockRecorder
}

// MockBalanceUsecasesMockRecorder is the mock recorder for MockBalanceUsecases
type MockBalanceUsecasesMockRecorder struct {
	mock *MockBalanceUsecases
}

// NewMockBalanceUsecases creates a new mock instance
func NewMockBalanceUsecases(ctrl *gomock.Controller) *MockBalanceUsecases {
	mock := &MockBalanceUsecases{ctrl: ctrl}
	mock.recorder = &MockBalanceUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBalanceUsecases) EXPECT() *MockBalanceUsecasesMockRecorder {
	return m.recorder
}

// StartSyncFromExchangePeriodically mocks base method
func (m *MockBalanceUsecases) StartSyncFromExchangePeriodically(period time.Duration) (func(), error) {
	ret := m.ctrl.Call(m, "StartSyncFromExchangePeriodically", period)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSyncFromExchangePeriodically indicates an expected call of StartSyncFromExchangePeriodically
func (mr *MockBalanceUsecasesMockRecorder) StartSyncFromExchangePeriodically(period interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSyncFromExchangePeriodically", reflect.TypeOf((*MockBalanceUsecases)(nil).StartSyncFromExchangePeriodically), period)
}

// SyncFromExchange mocks base method
func (m *MockBalanceUsecases) SyncFromExchange() error {
	ret := m.ctrl.Call(m, "SyncFromExchange")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncFromExchange indicates an expected call of SyncFromExchange
func (mr *MockBalanceUsecasesMockRecorder) SyncFromExchange() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromExchange", reflect.TypeOf((*MockBalanceUsecases)(nil).SyncFromExchange))
}

// FetchHourly mocks base method
func (m *MockBalanceUsecases) FetchHourly(currency string, hours int) ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "FetchHourly", currency, hours)
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHourly indicates an expected call of FetchHourly
func (mr *MockBalanceUsecasesMockRecorder) FetchHourly(currency, hours interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHourly", reflect.TypeOf((*MockBalanceUsecases)(nil).FetchHourly), currency, hours)
}

// FetchWeekly mocks base method
func (m *MockBalanceUsecases) FetchWeekly(currency string) ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "FetchWeekly", currency)
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWeekly indicates an expected call of FetchWeekly
func (mr *MockBalanceUsecasesMockRecorder) FetchWeekly(currency interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWeekly", reflect.TypeOf((*MockBalanceUsecases)(nil).FetchWeekly), currency)
}

// FetchMonthly mocks base method
func (m *MockBalanceUsecases) FetchMonthly(currency string) ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "FetchMonthly", currency)
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMonthly indicates an expected call of FetchMonthly
func (mr *MockBalanceUsecasesMockRecorder) FetchMonthly(currency interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMonthly", reflect.TypeOf((*MockBalanceUsecases)(nil).FetchMonthly), currency)
}

// FetchAll mocks base method
func (m *MockBalanceUsecases) FetchAll(currency string) ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "FetchAll", currency)
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll
func (mr *MockBalanceUsecasesMockRecorder) FetchAll(currency interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockBalanceUsecases)(nil).FetchAll), currency)
}

// GetActiveCurrencies mocks base method
func (m *MockBalanceUsecases) GetActiveCurrencies() ([]domain.CurrencyBalance, error) {
	ret := m.ctrl.Call(m, "GetActiveCurrencies")
	ret0, _ := ret[0].([]domain.CurrencyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCurrencies indicates an expected call of GetActiveCurrencies
func (mr *MockBalanceUsecasesMockRecorder) GetActiveCurrencies() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCurrencies", reflect.TypeOf((*MockBalanceUsecases)(nil).GetActiveCurrencies))
}
