// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/order.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/nawa/cryptoexchange-dashboard/domain"
	reflect "reflect"
)

// MockOrderUsecases is a mock of OrderUsecases interface
type MockOrderUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUsecasesMockRecorder
}

// MockOrderUsecasesMockRecorder is the mock recorder for MockOrderUsecases
type MockOrderUsecasesMockRecorder struct {
	mock *MockOrderUsecases
}

// NewMockOrderUsecases creates a new mock instance
func NewMockOrderUsecases(ctrl *gomock.Controller) *MockOrderUsecases {
	mock := &MockOrderUsecases{ctrl: ctrl}
	mock.recorder = &MockOrderUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderUsecases) EXPECT() *MockOrderUsecasesMockRecorder {
	return m.recorder
}

// GetActiveOrders mocks base method
func (m *MockOrderUsecases) GetActiveOrders() ([]domain.Order, error) {
	ret := m.ctrl.Call(m, "GetActiveOrders")
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveOrders indicates an expected call of GetActiveOrders
func (mr *MockOrderUsecasesMockRecorder) GetActiveOrders() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveOrders", reflect.TypeOf((*MockOrderUsecases)(nil).GetActiveOrders))
}
